@page "/Rendeles"
@using CommonLibrary.MODEL
@using Vizsgafeladat.VIEWMODEL
@using Vizsgafeladat.services
@inject ProductServices productServices
@inject CartService cartService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <nav class="navbar navbar-expand-lg mb-5">
        <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/">Vissza a főoldalra</NavLink>
                </li>
            </ul>
        </div>
    </nav>

    @* Termékkategóriák megjelenítése *@
    @if (products != null && products.Any())
    {
        <div class="text-center mb-5">
            <h1 style="color: cornsilk;">Torták</h1>
            <hr class="divider" />
            <div class="row">
                @foreach (var torta in products.Where(p => p.Category_id == 4))
                {
                    @ProductCard(torta)
                }
            </div>
        </div>

        <div class="text-center mb-5">
            <h1 style="color: cornsilk;">Sütemények</h1>
            <hr class="divider" />
            <div class="row">
                @foreach (var sutemeny in products.Where(p => p.Category_id == 3))
                {
                    @ProductCard(sutemeny)
                }
            </div>
        </div>

        <div class="text-center mb-5">
            <h1 style="color: cornsilk;">Fagylaltok</h1>
            <hr class="divider" />
            <div class="row">
                @foreach (var fagylalt in products.Where(p => p.Category_id == 2))
                {
                    @ProductCard(fagylalt)
                }
            </div>
        </div>

        <div class="text-center mb-5">
            <h1 style="color: cornsilk;">Italok</h1>
            <hr class="divider" />
            <div class="row">
                @foreach (var ital in products.Where(p => p.Category_id == 1))
                {
                    @ProductCard(ital)
                }
            </div>
        </div>
    }
    else
    {
        <p class="text-center">Betöltés folyamatban...</p>
    }

    @* Kosár megjelenítése *@
    <div class="container my-5">
        <h2 class="text-center">Kosarad</h2>
        @if (cartService.CartItems.Any())
        {
            <ul class="list-group mb-3">
                @foreach (var item in cartService.CartItems)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @item.Product.Name (Mennyiség: @item.Quantity)
                        <span class="badge bg-primary rounded-pill">@((int)(item.Price * item.Quantity)) Ft</span>
                    </li>
                }
            </ul>

            <p class="text-end"><strong>Teljes összeg: @((int)cartService.GetTotalPrice()) Ft</strong></p>

            <div class="text-center">
                <button class="btn btn-success" @onclick="SaveOrder">Rendelés leadása</button>
            </div>
        }
        else
        {
            <p class="text-center">A kosarad üres.</p>
        }
    </div>
</div>

@code {
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        products = await productServices.GetAllProducts();
    }

    private void AddToCart(Product product)
    {
        var productEntity = new Product
            {
                Product_id = product.Product_id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price ?? 0,
                Category_id = product.Category_id,
                Image_url = product.Image_url
            };

        cartService.AddToCart(productEntity, 1);
    }

    private async Task SaveOrder()
    {
        int orderId = await cartService.SaveOrderAsync();
        if (orderId > 0)
        {
            await Task.Delay(200);
            NavigationManager.NavigateTo("/rendeles-siker"); // majd csinálunk egy egyszerű siker oldalt
        }
        else
        {
            Console.WriteLine("Hiba történt a rendelés mentése közben.");
        }
    }

    private RenderFragment ProductCard(Product product) => __builder =>
    {
        // Felépítünk dinamikusan egy html oldalt.
        __builder.OpenElement(0, "div");
        __builder.AddAttribute(1, "class", "col-md-6 mb-4"); // Fél szélességű (6-os oszlop), margóval
        __builder.OpenElement(2, "div");
        __builder.AddAttribute(3, "class", "card shadow-sm");
        __builder.OpenElement(4, "div");
        __builder.AddAttribute(5, "class", "card-body text-center");

        __builder.OpenElement(6, "h5");
        __builder.AddContent(7, product.Name);
        __builder.CloseElement(); // h5

        __builder.OpenElement(8, "img");
        __builder.AddAttribute(9, "src", string.IsNullOrEmpty(product.Image_url) ? "img/default.jpg" : product.Image_url);
        __builder.AddAttribute(10, "alt", product.Name);
        __builder.AddAttribute(11, "class", "img-fluid mb-3");
        __builder.CloseElement(); // img

        __builder.OpenElement(12, "p");
        __builder.AddContent(13, product.Description);
        __builder.CloseElement(); // p

        __builder.OpenElement(14, "p");
        __builder.AddContent(15, $"Ár: {(int)(product.Price ?? 0)} Ft");
        __builder.CloseElement(); // p

        __builder.OpenElement(16, "button");
        __builder.AddAttribute(17, "class", "btn btn-primary");
        __builder.AddAttribute(18, "onclick", EventCallback.Factory.Create(this, () => AddToCart(product)));
        __builder.AddContent(19, "Kosárba");
        __builder.CloseElement(); // button

        __builder.CloseElement(); // card-body
        __builder.CloseElement(); // card
        __builder.CloseElement(); // col-md-6
    };
}
